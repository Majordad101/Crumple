{"license":"","file_hash":null,"name":"Crumple","version":"2021.9.24","description":"Nodes built by Gavin Crump (Aussie/BIM Guru) for Dynamo 2.3 and Revit 2020. Not tested in other builds, results may vary.","group":"","keywords":null,"dependencies":[],"contents":"© Alphabet - Generates an upper or lower case alphabet., © AreaLinesByCurves - Given a list of Dynamo curves, the node generates area boundary lines along them in the given view. For convenience of iterability, this node flattens the curve list by default., © AreasByPointsAndView - Given a view and a list of points, will create new areas at them. Note that you will need to provide a single view and list of points, or apply @levels to your inputs to have them work., © AreasByRooms - Given a list of rooms, the node will create areas in the same position for an area plan view. The areas will have their name and number set to match their respective room., © AussieBIMGuru - Opens the Aussie BIM Guru YouTube channel., © BIMGuru - Opens the BIM Guru website. Here you can access custom content built by the package author, as well as consult his services., © BIMGuruEducation - Takes you to my course and content platform, courses.bimguru.education., © BIPGbyName - Given a string or list of strings, return the corresponding BuiltIn Parameter Group., © BoundingFrame - Given a bounding box, returns the frame curves around it., © BIPGs - Returns all BuiltIn Parameter Groups by group and type., © CADImports - Returns all CAD import instances as well as their type and view., © CADLinks - Return all CAD linked instances as well as their types and owner views., © CeilingsByCurveloops - A new method unique to Revit 2022 that enables ceilings via the sketch API to support internal loops. Will not work in previous versions, and works best when the curves are in the form of list of lists of curves in continuous order., © CipherFrom - Converts numbers (or numbers as strings) from 'CipherTo' or from an alternative means back to lower case strings, including spaces., © CipherTo - Encodes strings to a numerical format for encoding or processing their values as numbers. The node can handle upper/lower case and also converts spaces to 0/00. You can proceed with numbers or strings, but numbers will not support padding to 2 digits for later processing back to strings., © ClosestLevel - For a list of points, returns the nearest level as well as the pulled point at the plane of the level. If you force the values to be below, it is recommended to apply some tolerance when you are analyzing elements at or just below the level you want them to be associated to., © ClosestNumber - For each number, find the nearest number in another list. Values are able to be forced down., © CreateDependentViews - Given a list of names and a view, will generate a set of dependent views upon that view with those names., © CreateLog - Writes the date, user name, script name and active model's name to a csv file. It will write to a specified directory, or the user's documents folder if a valid one is not provided. Will write new rows to the same file if one is found., © CreateSpaceTypes - Given a list of names, attempt to create new Space Types. If the name exists already, the Type will be skipped.\r\n\r\n'run_me' must be set to true., © Crumple - About the package., © CurrentPath - Returns the full file path, directory path and name of a Revit document., © CurrentScript - Returns the name of the currently active Dynamo script, with an optional extension., © CurrentSelection - Returns all elements currently selected by the user in the active document when this node ran., © CurrentView - Given the current document, return the active view., © CurtainGridCount - Returns the horizontal and vertical grid counts for curtain walls. Note that sometimes the parameter does not match the model for spacing based rules!, © CurvesFilterByHeight - Given a list of curves, filters them by the Z value of their mid point., © CurvesFilterByZ - Given a curve or list of curves, filter from the list only those of a specific Z factor in their midpoint direction., © DateTimeFormatted - A typical date time format for the current time, as well as date prefix and time suffix fields. These are typically useful for appending to file names generated via Dynamo., © Delay - Given a duration in seconds and some data, this script will delay that data by the given time. A threshold of 3 seconds is used by default to stop an undesirable number being provided., © Denominate - Given a list of numbers and a denominator, return the remainder of the numbers when divided by it. If the number is less than the demoninator, it will return the same number. This can be useful for identifying parallel vectors facing different directions by their angle about axis., © DependentViews - For a view, returns any dependent views it has as well as whether it has any., © DesignOptions - Returns all design options in a document., © DesignOptionsBySet - Returns all design options broken down by primary and secondary, as well as their related option set., © DesignOptionSet - For a given design option, return its related set., © Desaturate - Converts RGB colours to their average aggregate brightness (R+G+B / 3) and retains their alpha value., © DimensionTypes - Returns all dimension and spot dimension types (aka styles) in a document., © DirectoryContents - Be aware there is an OOTB node that can do this, but I wanted to add this to the package so others can see how to use a Python method as a starter block in other scripts., © DomainDeconstruct - Given a range of values, return the minimum, maximum and size of its domain., © DoorToFrom - Given a door, attempts to return its to and from room properties as well as how many rooms it relates to., © ElementById - Given an Element Id as an integer, returns the corresponding element in Revit., © ElementByUniqueId - Given a Unique Id as a string, returns the corresponding element in Revit., © ElementCentroid - Returns the centroid of the element's axis-aligned bounding box., © ElementDelete - Given a list of elements, attempt to delete them and then return true or false depending on whether it could be deleted. This script flattens the list structure before attempting., © ElementGroup - Returns if an element belongs to a group, and the group itself if it has one., © ElementHandFlipped - Returns true if an element has been hand flipped. If the element has been face flipped also, it will return false (as the element is technically not hand flipped in this case)., © ElementsCluster - Given a list of elements, determine how they should be grouped based on a proximity radius. The node will collect the centroid of each element (ignoring the Z coordinate) and cluster them based on whether their radii intersect with one another., © ElementSetWorkset - Given a workset and a list of elements, attempt to set those elements' worksets to it., © ElementsIsolate - Given a list of elements and a view (optional), will temporarily isolate them. If no view is provided, the active view will be used., © ElementsQuarantine - Given a list of element lists, exclude elements that wont comply with a given separation from one another. The node will return (one of) the most best possible outcomes for that group of elements., © ElementsSelect - Given a list of elements, flatten them to a list and select them in the Revit document (if possible)., © ElementStatus - Returns the creator, owner and last editor of an element in a workshared model if possible., © ElementsUnionBox - Given a list of elements, return the overall bounding box of all those that have a valid bounding box to return., © ElementTypeByName - Given an element type name, if it finds a match it will return that element type., © ElementTypes - Returns all element types and their names in the active document., © ElementView - Returns the owner view of an element, if any. Typically only works for view specific elements., © ElementWorksets - Given a list of elements, return their associated workset, its name and a unique list of workset names belonging to that list of elements., © ExportPDF - Given a list of sheets, names, directory and export options this node will batch export PDF files. Requires Revit 2022 or higher to work., © ExportPDFOptions - Provides a list of options to be used in conjunction with the ExportPDF node. Works in Revit 2022 and later., © FamilyDocParameterGet - For provided family types of a family document, returns the values of specified parameters by name. Currently only works for string and number based parameters., © FamilyDocParameters - Obtains all parameters in a family document, as well as their properties., © FamilyDocParameterSet - Given a list of family types, attempt to set a list of values to a list of parameters. The node expects the inputs to be a list of types, a list of parameter names and a list of lists of parameter values., © FamilyDocReplaceParameter - Given some family parameters in a document, replace them with new shared parameters with the chosen external definitions., © FamilyDocReplaceSharedParameter - Given some shared parameters in a family document, replaces them with new family parameters with the chosen names., © FamilyTypes - Returns all family types in a family document., © FamilyFirst - Returns the first instance of a family in the model. Handy for when you know you'll be targetting an early placed object like a homescreen., © FamilyInstancesInViewAtPoints - Given a family type, list of views and list of points, attempts to create family instances at those points in those views., © Fibonnaci - Returns the input number of Fibonnaci numbers., © FileSize - For given file objects, returns their size in bytes, kilobytes and megabytes., © Regions - Returns all filled and/or masking regions in a document., © FillPatterns - Returns all fill patterns in a document., © FilterSolids - From a list or lists of geometry, filter out anything that doesn't fall under the object type solid. This is useful for dealing with families that contain geometry like curves from model lines., © Flipper - If a true value is provided, return the inputs on opposite branches in the output. Otherwise returns them in the same order., © FloorsByCurveloops - A new method unique to Revit 2022 that enables floors via the sketch API to support internal loops. Will not work in previous versions, and works best when the curves are in the form of list of lists of curves in continuous order., © FromClipboard - Attempts to retrieve the current data on the clipboard., © Gate - Unless a true value is provided, sends across an empty list instead of an input stream., © GetDocument - If no input is specified or an invalid one is, returns current document. If a link instance is provided, it returns the linked document. If a document is provided it will pass it through., © GetRotation - Returns the rotation of both point and line based elements. Not as thorough as other nodes out there, but a bit faster and robust when you know your elements are likely family instances., © GetSpaceType - Gets a Space's Type as well as it's name and Id., © GetWarnings - Returns all warnings in the Revit model in their Revit db format., © GroupElements - Given a Revit group, return all elements in that given group if any., © GroupHasExclusions - Returns a boolean as to whether a group contains excluded elements., © IfThenElse - A simple if/then/else logic gate. If true, you get the 'then' input, otherwise you get the 'else' input. Unlike the OOTB 'If' node, this one allows differing list sizes., © Images - Returns all image instances in a document as well as their names, types and owner views., © IntegerToOrdinal - Given an integer or list of integers, convert it to its ordinal form. The node works with an inherent limit of 99, but may be expanded in future if a computationally efficient method is identified., © IsInPlace - Given a family, returns if that family is modelled in place. Noting this is for the family of an instance, not the instance itself., © IsKeySchedule - Given an element or list of elements, will return whether that item is a Key schedule., © IsRevisionSchedule - Gosh these things are annoying when we're isolating schedule types! This lets you detect if an element is a revision schedule on a sheet in the model., © IsWorkshared - Returns if a document is workshared., © LegendTypes - Returns all legend types in a document., © LevelByElevationAndName - Given elevations and names, create levels with those properties., © LevelGetByName - Given a list of names, returns the matching levels (if they exist)., © LinePatterns - Returns all line patterns in a document., © Lines - Returns all lines in a document, with the option to exclude or include detail/model lines in the output. By default will return all of them., © LineStyles - Returns all the line styles in a document as well as their graphic styles, names, ids and whether a user made them., © LinkedElementsByCategory - Returns all elements of any number of categories in a single Revit Model link instance., © ListCombinate - Given a list and a length, will find all combinations of that list included repetion of the elements. Takes order into consideration as well., © ListForce - A basic node to check if the input is in the form of a list, and if not it forces it to become one. This simple python script is useful for incorporation into larger scripts for iterating., © ListKickFlip - Drops a certain number of rows from the front a list, then transposes it. Handy for pre-processing Excel data!, © ListPositize - From a list of numbers, replace all negative values with a substitute value. Useful for processing those pesky -1 indices!, © ListSplitAtIndex - Splits a list at a specific index, then returns the two lists. You may need to use levels in order for this to work properly., © ListSplitAtValue - Given a list (or list of lists), split the lists into sublists wherever a specified value occurs. Typically used for processing lists of booleans or 1's and 0's in Ladybug sun hour results to isolate continuous periods., © ListStringOccurences - Given a list of strings, returns the number of times each string appears in that list., © MaterialsByPrefix - Returns all materials in a document, sorted by whether they contain a specified prefix., © OldIf - Retains the functionality of the old if node (no Python used). All credit to the Zebra package - hadn't been updated since 2016 so decided to give it a new home., © OpenURL - Given a URL, will attempt to open in the default web browser used by Windows., © Ordinals - Returns a list containing 1 through to 99 in ordinal format., © OutlookSend - Given Outlook is open, this node will attempt to send an email to a list of recipients with a subject and body., © OverrideAlpha - Overrides the alpha value (transparency) of all colours fed into the node. The transparency value should be between 0 and 255., © ParametersRepath - Given a filepath, will attempt to change the path that the Revit session is drawing its shared parameter file from., © ParentView - For a view, return it's next related parent view if any. Will only retrieve one level above (even if it's parent has a parent etc.)., © Phases - Returns all phases in a document., © PlaceholderSheets - Returns all placeholder sheets in a document., © PointsToRevitCoordinates - This node translates points in Dynamo coordinates to their respective Revit project coordinate., © PolyCurveGreatestArea - From a list of polycurves, return the one with the largest area only. Can be useful for determining the outer-most boundary in a room with internalised holes., © PopulateElement - Distributes points randomly amongst the bounding box of an element., © PopulateSurface - Distributes a certain number of points randomly across an input surface., © PrimaryView - For a dependent view, return it's primary view, as well as if it has one., © ProjectBasePoint - This node will return the Revit project base point as well as the NS, EW and elevation values., © ProjectInformation - Retrieve project information field(s) by name., © ProjectOrigin - This node will return the Revit project origin as well as the NS, EW and elevation values., © QuickImportExcel - The Import excel node, but with some streamlining features introduced. I mainly made this as I am constantly doing this setup and wanted to simplify it down to one node., © RandomNumbers - Generates a list of random numbers between a minimum and maximum value., © RegexSimple - Based on a single regex statement, check all strings against it., © RegionEdgeStyles - Returns the graphic styles of the edges of a filled or masking region., © ReplaceNulls - Replaces all nulls with a given substitute., © Revisions - Returns all revisions in a document., © RevitLegal - Finds all illegal characters for a Revit named element and substitutes them with a character., © RevitLinks - Returns all Revit link types in the current document, as well as all instance elements of those types., © RevitVersion - Returns the build information about the active Revit session., © RoomBoundaries - For a room or list of rooms, return all boundary (and internal) curves. The curves will be based on the currently nominated project room boundary settings., © RoomsByPlacement - Collects all valid/invalid rooms as two lists. Invalid rooms are not placed, or have issues that make their area invalid (not enclosed, redundant etc.)., © RoundToString - Given a list of numbers with decimal places, round them to a specific length and convert that to a string. More reliable than String.ToObject., © ScheduleHeaderRename - Given a schedule as well as lists of existing/new naming targets, the node will attempt to find a header with that matching name and update its name to the new one., © ScheduleHeaders - Given a schedule or list of schedules, return their header fields and actual/formatted names., © ScheduleInstances - Returns all schedule sheet instances as well as their types. Optional exclusions for each schedule type (schedule, key, revision)., © ScheduleKeys - Given a list of schedules, will return the key values of each schedule as elements as well as their names if that schedule is a key schedule., © ScheduleResetHeaders - Given a schedule or list of schedules, reset the names of all of their headers., © SchedulesByType - Returns all schedules in a document, separated into key and non-key schedules., © ScheduleType - Given a schedule sheet instance, returns the corresponding schedule type., © ScheduleTypes - Returns all standard schedule types in a document, excluding key and revision schedules., © ScopeBoxAssigned - Given an element, will check if a scope box is assigned to it and return it if so., © ScopeBoxUsed - Checks if a scope box is applied to any views, levels or grids in a document., © ScopeBoxViews - For a scope box or list of them, returns all views that are using that scope box., © SharedParameterDefinitions - Returns the currently available shared parameters, their groups and the external definitions for both., © SharedParametersPath - Returns the path to the currently active shared parameters file., © SheetAddRevisions - Given a list of sheets, attempt to add the given revisions to each of those sheets., © SheetByNumber - Given a sheet number, return the matching sheet. If no match is found, a message is returned. The node also returns a matches list and a list of indices for non-matches., © SheetIsPlaceholder - Given a list of sheets, returns a boolean as to whether they are placeholders., © SheetNameFormatted - Given a list of sheets, apply a typical naming convention to them with some optional fields such as prefix and separator., © SheetRemoveRevisions - Given a list of sheets, attempt to remove given revisions from those sheets., © SheetRevisions - Given a sheet, returns all revisions associated with that sheet as elements., © Sheets - Returns all the sheets in a document, with the option to omit any placeholder sheets., © SheetsCreate - Creates Revit sheets based on a list of names, numbers and a single Titleblock type., © SheetTitleblock - Given a sheet or list of sheets, return any titleblocks on that sheet as well as whether the sheet has titleblocks as a boolean., © SpaceSchedules - Gets all occupancy, power and lighting schedules currently applied to any Space Types in a document. Also returns their name and Id., © SpaceTypes - Collects all space types as well as their names from a document., © StairAddPath - Given a list of stairs, a path type and a view, the node attempts to place a path on each of those stairs in that view. Stairs can only have 1 path placed per view, so will return an error if any already have one applied., © StringDeCamelize - Splits one or multiple strings into sublists, broken down at each upper case character., © StringExplode - Deconstructs a string (or list of strings) into their characters. There is the option to replace spaces with a special character which can be helpful for delimiting or visual ergonomics., © StringFromObject_PY - Uses the python str() function to convert data types to strings. Unlike 'string from object' this will trim trailing 0's from numbers., © StringJoin+ - Joins a list of strings together, inserting a separating character between each of them. Input must be a list containing a list or lists., © SumCumulative - Continuously adds a list of numbers together, returning a list of the values in sequence., © SurfaceClampZ - Given a lower and upper parameter between -1 and 1, return all surfaces with a normal Z value in that range., © SurveyPoint - This node will return the Revit survey point as well as the NS, EW and elevation values., © SwissSurface - Takes a collection of polycurves, finds the encapsulating curve and returns the outermost surface (with holes cut out). The result must be projected to a common plane., © TimerCheck - Will output a time taken once data has passed through this node, as well as the duration since a given datetime occured. Connect this up to a TimerStart or other TimerCheck nodes to measure the runtime of your scripts!, © TimerStart - Will output a time that is taken once data has passed through this node. Connect this time up to TimerCheck nodes to measure execution times., © ToClipboard - Attempts to send data to the clipboard., © UILogoPath - Returns the file path of your 'My Documents' folder, then the file 'logo.png'. If you store your logo here you can call on it reliably for Data Shapes interfaces., © UIMessenger - Displays a message box with a title/body and OK/cancel button. If OK is selected, the third input's data will be passed through., © UIPather - When runMe is set to true, this node will display a file path dialogue for the user to interact with. The script will remain paused until the input is provided a value., © UnionBox - Given a list of bounding boxes, form the overall bounding box of those boxes., © UserDesktop - This node returns the active username, as well as a path to the user's Desktop., © UserDocuments - This node returns the active username, as well as a path to the user's My Documents., © UserNames - This node returns the users Windows and Revit user names., © UserPath - This node return's the active username, as well as a path to their user folder., © UserPaths - This node returns the active username, as well as common user paths including:\r\n- Desktop\r\n- My Documents\r\n- Temp\r\n- Dynamo Revit (for active build)\r\n- Dynamo Revit logs (\" \"), © UserTemp - This node returns the active username, as well as a path to the user's Temp files., © VectorFromString - Given a string form of a vector (X = x.xxx, Y = x.xxx, Z = x.xxx), return the equivalent vector. Note that if the original vector was more precise than 3 significant figures, it will be now only accurate to this many., © VectorGroupByDirection - Given a list of vectors (and a list of data), return the data and vectors grouped by their direction., © VectorGroupByParallel - Given a list of vectors (and a list of data) return the data and vectors grouped by their parallelism., © ViewAncestry - Returns the parent of a view, and the parent of that view, and the.... etc. Will also return if it had any parents, as well as the depth of the view's family tree., © ViewGetCropBox - Returns the curves of a view's cropbox (even if not visible/active). Also returns whether the cropbox is currently visible and active as booleans., © ViewGetPhase - Given a view or list of views, returns the phases applied to those views as elements., © ViewLevel - Returns the associated level of a view (if it has one), as well as a boolean mask to remove views without levels after., © ViewOpen - Opens a Revit view (can also be a sheet)., © ViewPlanCreate - Given an even list of levels and names and a view type, this node will create new plan views for those levels and attempt to rename them if a name is available. You can automate the application of view templates by assigning them to the view types in Revit as well. If you feed in a ceiling plan type, it will make a ceiling plan due to how the ViewPlan API works., © ViewportRelatives - For a viewport, returns the related view and sheet., © Views - Returns all views in a document. Excludes system views, templates, legends and schedule instances., © ViewsAndNames - Returns all views and view templates in the model, as well as their names., © ViewSectionBox - Returns the section box of any view as a bounding box in Dynamo. Does not support section boxes with rotations applied to them (will return the original section box before rotation), and will actually return a bounding box even if a view doesn't have one applied. Use with care!, © ViewSetCropBox - Given a view and one polycurve, sets the boundary of that views crop to the curves of that polycurve. Will not accept multiple polycurves or a list of curves., © ViewSetPhase - Given a list of views and a single phase, will set the views phases if possible., © ViewSetSunSettings - Given a list of views, apply a datetime and shadow intensity setting to their sun settings (still). You will need to update the shadows on/off setting manually or via a view template., © ViewsInSheetSet - Given a sheet set, returns all views and sheets combined as well as separated., © ViewsToSheets_ByPoint - Moves views to sheets based on viewport centres. The node expects 1 point only, and will source this for all view placement., © ViewsToSheets_ByPoints - Moves views to sheets based on viewport centres. The node expects the same number of points as views/sheets to be provided., © ViewTemplates - Returns all view templates in a document. Due to API/Dynamo limitations, 3D view templates are excluded from the list., © WaitFor - Tells the first input to wait for the second input to arrive, then passes on the first input. Really useful for scripts which have branching paths that rely on their outputs to carry each other forward.\r\n\r\nQuite a few custom packages have a 'passthrough' or 'waitfor' node. I use these all the time, so find it useful to have them contained in this package also., © WarningElements - Returns the element(s) associated with the provided warning., © WarningMessage - Given a warning element in Revit db format, will return the message associated with that warning in a generic string format., © WindowsLegal - Finds all illegal characters for a windows named element and substitutes them with a replacement., © WorksetCreate - Attempts to create worksets given a provided name. Will return whether it was successful in each case, as well as the new workset's Id where it was (and a null where it wasn't)., © WorksetRename - Will attempt to rename a workset to a newly provided name. If the workset cannot be renamed, a null value will be returned as well as a success report., © Worksets - Returns all user worksets and their names in a document.","engine_version":"2.3.1.11830","engine":"dynamo","engine_metadata":"","site_url":"www.youtube.com/aussiebimguru","repository_url":"","contains_binaries":true,"node_libraries":["Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null","Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"]}